{"version":3,"sources":["components/ModalWIndow.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","borderTopRightRadius","borderBottomRightRadius","padding","dialogTitle","fontSize","fontWeight","display","alignItems","color","icon","dialogTitleIcon","paddingLeft","marginRight","rootItem","borderRadius","maxWidth","width","marginLeft","formField","dialogContainer","formButton","border","selectBorder","dialogBold","marginBottom","fieldContainer","dialogDescription","dialogAnchor","textDecoration","dialogButtonIcon","labelButton","THEME","createMuiTheme","typography","DialogTitle","withStyles","margin","spacing","closeButton","position","right","top","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","aria-label","onClick","Close","DialogContent","MuiDialogContent","CustomizedDialogs","data","onPreview","selectedFields","React","useState","isOpenModal","setOpenModal","fieldLabels","resultArray","key","map","item","i","label","includes","value","dialogData","setDialogData","Button","bind","this","Dialog","paper","aria-labelledby","open","id","SaveAlt","dividers","gutterBottom","href","noValidate","autoComplete","FormControl","InputLabel","htmlFor","OutlinedInput","onChange","e","number","text","currentFields","changeFieldText","target","Select","outlined","updatedFields","setDialogField","displayEmpty","IconComponent","ExpandMore","defaultValue","MenuItem","autoFocus","result","forEach","preparedPreviewObj","Cached","App","Phone","Email","Contact","obj","alert","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.446b6663.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles, createMuiTheme, MuiThemeProvider, makeStyles} from '@material-ui/core/styles';\nimport {Button, Dialog, Select, MenuItem, OutlinedInput, FormControl, InputLabel, Typography, IconButton, DialogTitle as MuiDialogTitle, DialogContent as MuiDialogContent } from '@material-ui/core';\nimport {Close as CloseIcon, ExpandMore, SaveAlt, Cached as CachedIcon } from '@material-ui/icons';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    padding: '1px 0',\n  },\n  dialogTitle: {\n    fontSize: 14,\n    fontWeight: 700,\n    display: 'flex',\n    alignItems: 'center',\n    color: '#455A64',\n  },\n  icon: {\n    color: '#1E88E5',\n  },\n  dialogTitleIcon: {\n    paddingLeft: 0,\n    marginRight: 13,\n    color: '#455A64',\n  },\n  rootItem: {\n    borderRadius: 0,\n    borderTopRightRadius: 4,\n    borderBottomRightRadius: 4,\n    color: '#1E88E5',\n    fontWeight: 600,\n    maxWidth: 204,\n    width: '100%',\n    marginLeft: 5,\n  },\n  formField: {\n    width: '100%',\n  },\n  dialogContainer: {\n    maxWidth: 700,\n    width: '100%',\n  },\n  formButton: {\n    width: '100%',\n    border: '2px solid #1E88E5',\n    borderRadius: 4,\n    fontSize: 13,\n    color: '#1E88E5',\n    fontWeight: 600,\n  },\n  selectBorder: {\n    border: '1px solid #A3D2FC',\n  },\n  dialogBold: {\n    fontWeight: 700,\n    color: '#455A64',\n    marginBottom: 16,\n  },\n  fieldContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  dialogDescription: {\n    fontWeight: 500,\n    fontSize: 12,\n    color: '#99ABB4',\n  },\n  dialogAnchor: {\n    fontWeight: 700,\n    color: '#1E88E5',\n    textDecoration: 'underline',\n  },\n  dialogButtonIcon: {\n    marginRight: 5,\n  },\n  labelButton: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n}));\n\nconst styles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n    padding: 0,\n  },\n});\n\nconst THEME = createMuiTheme({\n  typography: {\n   \"fontFamily\": \"\\\"Montserrat\\\", sans-serif\",\n   \"fontSize\": 14,\n  }\n});\n\nconst DialogTitle = withStyles(styles)(props => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles(theme => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nexport default function CustomizedDialogs({data, onPreview, selectedFields}) {\n  const classes = useStyles();\n  const [isOpenModal, setOpenModal] = React.useState(false);\n  const fieldLabels = ['', 'Customer Name', 'Phone', 'Email', 'Contacts']; //пустая строка для \"Не выбрано\"\n  const [dialogData, setDialogData] = React.useState( ( ) => {\n    if (selectedFields) {\n      let resultArray = [];\n      for (const key in selectedFields) {\n        resultArray[selectedFields[key]] = key; \n      }\n\n      return data.map( (item, i) => {\n        return {\n          label: fieldLabels.includes(resultArray[i]) ? resultArray[i] : '' ,\n          value: item\n        }\n      });\n    }\n\n    return data.map( (item, i) => {\n      return {\n        label: '',\n        value: item\n      }\n    });\n  });\n\n  const setDialogField = (number, value) => {\n    let updatedFields = dialogData.map( (item, i) => {\n      if (i === number) return {\n        ...item,\n        label: value\n      };\n\n      return item;\n    });;\n\n    setDialogData(updatedFields);\n  }\n\n  const changeFieldText = (number, text) => {\n    let currentFields = dialogData.map( (item, i) => {\n      if (i === number) return {\n        label: item.label,\n        value: text\n      };\n\n      return item;\n    });\n    setDialogData(currentFields);\n  }\n\n  const preparedPreviewObj = (data) => {\n    let result = {};\n\n    data.forEach( (item, i) => { \n      if (item.label) result[item.label] = i;\n    });\n\n    return result;\n  }\n\n  return (\n    <MuiThemeProvider theme={THEME}>\n      <Button variant=\"outlined\" color=\"primary\" onClick={setOpenModal.bind(this, true)}>\n        Open dialog\n      </Button>\n\n      <Dialog classes={{paper: classes.dialogContainer}} onClose={setOpenModal.bind(this, false)} aria-labelledby=\"customized-dialog-title\" open={isOpenModal}>\n        <DialogTitle className={classes.dialogTitle} id=\"customized-dialog-title\" onClose={setOpenModal.bind(this, false)}>\n          <span className={classes.dialogTitle}>\n            <SaveAlt className={classes.dialogTitleIcon} />  Import Customers Base\n          </span>\n        </DialogTitle>\n        \n        <DialogContent dividers>\n          <Typography classes={{root: classes.dialogBold}}>\n            Fields from uploaded CSV file\n          </Typography>\n          <Typography gutterBottom className={classes.dialogDescription}>\n            Please choose correct columns and click Show Table Preview to see your imported data.\n            <br /><a href=\"/\" className={classes.dialogAnchor}>Send us your base file</a> and we'll import it ourselves if you have any problems with that.\n          </Typography>\n        </DialogContent>\n\n        <DialogContent>\n          <form noValidate autoComplete=\"off\">\n            {dialogData.map( (item, i) => \n              <div key={i} className={classes.fieldContainer}>\n                <FormControl className={classes.formField} variant=\"outlined\">\n                  <InputLabel htmlFor=\"component-outlined\">Field {i}</InputLabel>\n\n                  <OutlinedInput\n                    id=\"component-outlined\"\n                    value={item.value}\n                    label={`Field ${i}`}\n                    classes={{root: classes.root}}\n                    onChange={ (e) => changeFieldText(i, e.target.value)}\n                  />\n                </FormControl>\n                <Select \n                  className={classes.rootItem} \n                  classes={{icon: classes.icon, outlined: classes.selectBorder}} \n                  value={item.label} \n                  onChange={(e) => setDialogField(i, e.target.value)} \n                  displayEmpty \n                  variant=\"outlined\" \n                  IconComponent={ExpandMore}\n                  defaultValue=''\n                >\n                  {\n                    fieldLabels.map( item => <MenuItem key={item} value={item}>{item === '' ? 'Не выбрано' : item}</MenuItem>)\n                  }\n                </Select>\n              </div>\n            )}\n\n            <Button autoFocus onClick={onPreview.bind(this, preparedPreviewObj(dialogData))} color=\"primary\" classes={{root: classes.formButton, label: classes.labelButton}}>\n              <CachedIcon className={classes.dialogButtonIcon} /> Show Table Preview\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </MuiThemeProvider>\n  );\n}\n","import React from 'react';\nimport ModalWindow from './components/ModalWIndow';\n\nfunction App() {\n  return (\n    <ModalWindow selectedFields={{Phone: 1, Email: 2, Contact: 0}} onPreview={(obj) => alert(JSON.stringify(obj))} data={['dfd', 'ere','sd']} />\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}